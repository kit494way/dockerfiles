version: 2
jobs:
  build:
    working_directory: /work
    docker:
      - image: docker:stable-git
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/image.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/image.tar | true
      - run:
          name: Export environment variables
          command: |
            if [ -n "${CIRCLE_TAG}" ]; then
              echo 'export DOCKERFILE_DIR=$(echo ${CIRCLE_TAG} | cut -d/ -f1 )' >> $BASH_ENV
              echo 'export DOCKER_TAG=$(echo ${CIRCLE_TAG} | cut -d/ -f2 )' >> $BASH_ENV
            else
              echo 'export DOCKERFILE_DIR=${CIRCLE_BRANCH}' >> $BASH_ENV
              echo 'export DOCKER_TAG=latest' >> $BASH_ENV
            fi
            echo 'export DOCKER_IMAGE_NAME=${DOCKERHUB_USER}/${DOCKERFILE_DIR}:${DOCKER_TAG}' >> $BASH_ENV
      - run:
          name: Build Docker image
          command: |
            source $BASH_ENV
            if [ -e "${DOCKERFILE_DIR}/circleci_build" ]; then
              source ${DOCKERFILE_DIR}/circleci_build
            else
              docker build --cache-from=image -t ${DOCKER_IMAGE_NAME} ${DOCKERFILE_DIR}/
            fi
      - run:
          name: Save Docker image layer cache
          command: |
            source $BASH_ENV
            mkdir -p /caches
            docker save -o /caches/image.tar ${DOCKER_IMAGE_NAME}
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/image.tar
      - deploy:
          name: Push Docker image
          command: |
            source $BASH_ENV
            docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWORD}
            docker push "${DOCKER_IMAGE_NAME}"
workflows:
  version: 2
  build_image:
    jobs:
      - build:
          filters:
            branches:
              only:
                - anyenv
                - ruby-node
                - rsync
                - selenium-standalone-chrome
              ignore:
                - master
            tags:
              only:
                - /anyenv\/.+/
                - /ruby-node\/.+/
  daily:
    triggers:
      - schedule:
          cron: "0 1 * * *"
          filters:
            branches:
              only:
                - selenium-standalone-chrome
    jobs:
      - build
